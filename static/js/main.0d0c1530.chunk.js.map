{"version":3,"sources":["robo.js","cardList.js","Searchbar.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Robo","className","alt","src","this","props","id","name","email","Component","CardList","cardComponent","Robots","map","user","i","key","username","Searchbar","style","marginBottom","type","placeholder","onChange","searchChange","Scroll","overflowY","border","height","children","App","onSearchChange","event","setState","Searchfield","target","value","state","fetch","then","response","json","users","filterRobo","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAgBeA,E,uKAZP,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,mBACnB,6BACI,4BAAKF,KAAKC,MAAME,MAChB,uBAAGN,UAAU,aAAaG,KAAKC,MAAMG,a,GAPtCC,aCeJC,E,uKAZD,IAEAC,EADaP,KAAKC,MAAhBO,OACqBC,KAAI,SAACC,EAAKC,GACnC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIQ,EAAKR,GAAIC,KAAMO,EAAKP,KAAMU,SAAUH,EAAKG,SAAUT,MAAOM,EAAKN,WAE5F,OACI,6BAAMG,O,GAPKF,aCaRS,E,uKAZP,OACI,2BACAC,MAAO,CAACC,aAAc,OACtBnB,UAAU,mCACVoB,KAAK,SACLC,YAAY,gBACZC,SAAUnB,KAAKC,MAAMmB,mB,GARTf,aCcTgB,G,wDAbX,WAAYpB,GAAQ,uCACVA,G,qDAIN,OACI,yBAAKc,MAAO,CAACO,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAC/DxB,KAAKC,MAAMwB,SADhB,S,GAPSpB,cCyCNqB,G,wDAnCX,aAAc,IAAD,8BACT,gBAMJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAN1C,EAAKC,MAAQ,CACTzB,OAAO,GACPsB,YAAa,IAJR,E,gEAWO,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACrB,OAAQ8B,S,+BAEvH,IAAD,OACEC,EAAavC,KAAKiC,MAAMzB,OAAOgC,QAAO,SAAAhC,GACxC,OAAOA,EAAOL,KAAKsC,cAAcC,SAAS,EAAKT,MAAMH,YAAYW,kBAGjE,OAAgC,IAA7BzC,KAAKiC,MAAMzB,OAAOmC,OACV,wBAAI9C,UAAU,MAAd,gBAEC,yBAAKA,UAAU,MACvB,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWuB,aAAcpB,KAAK2B,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ+B,U,GA3BlBlC,cCIEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d0c1530.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Robo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\" bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n                <img alt=\"robo\" src={`https://robohash.org/${this.props.id}?size=200x200`}></img>\r\n                <div>\r\n                    <h2>{this.props.name}</h2>\r\n                    <p className=\"underline\">{this.props.email}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Robo;","import React, { Component } from \"react\";\r\nimport Robo from \"./robo\";\r\n\r\n\r\nclass CardList extends Component {\r\n    render() {\r\n        const { Robots } = this.props;\r\n        const cardComponent = Robots.map((user,i) => {\r\n            return <Robo key={i} id={user.id} name={user.name} username={user.username} email={user.email} />\r\n        })\r\n        return (\r\n            <div>{cardComponent}</div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, { Component } from \"react\";\r\n\r\n\r\nclass Searchbar extends Component{\r\n    render(){\r\n        return(\r\n            <input\r\n            style={{marginBottom: \"5px\"}}\r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type=\"search\" \r\n            placeholder=\"Serach Robots\"\r\n            onChange={this.props.searchChange}\r\n            ></input>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Searchbar;","import React, { Component } from \"react\";\r\nimport \"./Scroll.css\";\r\n\r\nclass Scroll extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n      }\r\n    render(){\r\n        return (\r\n            <div style={{overflowY: \"scroll\", border: \"2px solid black\", height:\"800px\"}}>\r\n                {this.props.children};\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\nimport CardList from \"./cardList\";\r\n// import {Robots} from \"./9.1 robots\";\r\nimport Searchbar from \"./Searchbar\";\r\nimport Scroll from \"./Scroll\";\r\nimport \"./App.css\";\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            Robots:[],\r\n            Searchfield: \"\"\r\n        }\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({Searchfield : event.target.value});\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(users => {this.setState({Robots: users})});\r\n    }\r\n    render(){\r\n        const filterRobo = this.state.Robots.filter(Robots => {\r\n            return Robots.name.toLowerCase().includes(this.state.Searchfield.toLowerCase())\r\n        })\r\n        \r\n            if(this.state.Robots.length === 0){\r\n                return <h1 className=\"tc\">Loading.....</h1>\r\n            }else{\r\n                return (<div className=\"tc\">\r\n                <h1 className=\"f1\">Robot Friends</h1>\r\n                <Searchbar searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                  <CardList Robots={filterRobo} />\r\n                </Scroll>\r\n            </div>);\r\n            }\r\n            \r\n        \r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}